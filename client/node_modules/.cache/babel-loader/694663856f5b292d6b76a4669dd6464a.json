{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport logger from \"./logService\"; // Whenever we have an response with an error, this function will be called first and then the controller will pass to a catch block\n\naxios.interceptors.response.use(null, function (error) {\n  var expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedError) {\n    // Unexpected (network down, server down, database down, bug)\n    // - Log them\n    // - Display a generic and friendly error message\n    logger.log(error);\n    toast.error(\"An unexpected error occured.\");\n  }\n\n  return Promise.reject(error);\n});\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};","map":{"version":3,"sources":["/Users/eevans/Desktop/Homework/GoogleBooksReactSearch/client/src/services/httpService.js"],"names":["axios","toast","logger","interceptors","response","use","error","expectedError","status","log","Promise","reject","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,KADJ,QAEO,gBAFP;AAGA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAsC,UAAAC,KAAK,EAAI;AAC3C,MAAMC,aAAa,GACfD,KAAK,CAACF,QAAN,IACAE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACF,QAAN,CAAeI,MAAf,GAAwB,GAH5B;;AAKA,MAAI,CAACD,aAAL,EAAoB;AAChB;AACA;AACA;AACAL,IAAAA,MAAM,CAACO,GAAP,CAAWH,KAAX;AACAL,IAAAA,KAAK,CAACK,KAAN,CAAY,8BAAZ;AACH;;AAED,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,CAfD;AAiBA,eAAe;AACXM,EAAAA,GAAG,EAAEZ,KAAK,CAACY,GADA;AAEXC,EAAAA,IAAI,EAAEb,KAAK,CAACa,IAFD;AAGXC,EAAAA,GAAG,EAAEd,KAAK,CAACc,GAHA;AAIXC,EAAAA,MAAM,EAAEf,KAAK,CAACe;AAJH,CAAf","sourcesContent":["import axios from \"axios\";\nimport {\n    toast\n} from \"react-toastify\";\nimport logger from \"./logService\";\n\n// Whenever we have an response with an error, this function will be called first and then the controller will pass to a catch block\naxios.interceptors.response.use(null, error => {\n    const expectedError =\n        error.response &&\n        error.response.status >= 400 &&\n        error.response.status < 500;\n\n    if (!expectedError) {\n        // Unexpected (network down, server down, database down, bug)\n        // - Log them\n        // - Display a generic and friendly error message\n        logger.log(error);\n        toast.error(\"An unexpected error occured.\");\n    }\n\n    return Promise.reject(error);\n});\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};"]},"metadata":{},"sourceType":"module"}